// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// https://www.prisma.io/docs/concepts/components/prisma-migrate
// npx prisma init --datasource-provider sqlite
// npx prisma studio
// 逆向生成数据模型
// npx prisma introspect
// npx prisma generate
// npx prisma db push
// npx prisma migrate dev --name init
// prisma migrate dev --name added_job_title
// npx prisma migrate dev
// npx prisma migrate dev --create-only
// npx prisma migrate deploy
generator client {
  provider      = "prisma-client-js"
  engineType    = "library"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Company {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  Purchase Purchase[]
}

model Customer {
  id   Int    @id @default(autoincrement())
  name String @unique
  Sale Sale[]
}

model Family {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  Product Product[]
}

model Product {
  id              Int               @id @default(autoincrement())
  code            String
  name            String
  costPrice       Decimal
  salePrice       Decimal
  imageUrl        String
  alertQuantity   Int
  expirationDate  DateTime
  family          Family            @relation(fields: [familyId], references: [id])
  familyId        Int
  unit            Unit              @relation(fields: [unitId], references: [id])
  unitId          Int
  created         DateTime          @default(now())
  updated         DateTime          @default(now())
  ProductPurchase ProductPurchase[]
  ProductSale     ProductSale[]
  Stock           Stock[]
}

model ProductPurchase {
  id            Int      @id @default(autoincrement())
  product       Product  @relation(fields: [productId], references: [id])
  productId     Int
  purchase      Purchase @relation(fields: [purchaseId], references: [id])
  purchaseId    Int
  amount        Decimal
  price         Decimal
  untaxedAmount Decimal
  taxes         Decimal
  subTotal      Decimal
  created       DateTime @default(now())
  updated       DateTime @default(now())
}

model ProductSale {
  id            Int      @id @default(autoincrement())
  product       Product  @relation(fields: [productId], references: [id])
  productId     Int
  sale          Sale     @relation(fields: [saleId], references: [id])
  saleId        Int
  amount        Decimal
  price         Decimal
  untaxedAmount Decimal
  taxes         Decimal
  subTotal      Decimal
  created       DateTime @default(now())
  updated       DateTime @default(now())
}

model Purchase {
  id                 Int               @id @default(autoincrement())
  code               String
  date               DateTime          @default(now())
  company            Company           @relation(fields: [companyId], references: [id])
  companyId          Int
  totalPrice         Decimal
  totalUntaxedAmount Decimal
  totalTaxes         Decimal
  created            DateTime          @default(now())
  updated            DateTime          @default(now())
  ProductPurchase    ProductPurchase[]
}

model Sale {
  id                 Int           @id @default(autoincrement())
  code               String
  date               DateTime      @default(now())
  customer           Customer      @relation(fields: [customerId], references: [id])
  customerId         Int
  totalPrice         Decimal
  totalUntaxedAmount Decimal
  totalTaxes         Decimal
  created            DateTime      @default(now())
  updated            DateTime      @default(now())
  ProductSale        ProductSale[]
}

model Stock {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  amount    Int
  created   DateTime @default(now())
  updated   DateTime @default(now())
}

model Unit {
  id      Int       @id @default(autoincrement())
  name    String
  created DateTime  @default(now())
  updated DateTime  @default(now())
  Product Product[]
}

// model User {
//   id      Int      @id @default(autoincrement())
//   email   String   @unique
//   name    String?
//       role    Role     @default(USER)
//   posts   Post[]
//   profile Profile?
// }
//
// model Profile {
//   id     Int    @id @default(autoincrement())
//   bio    String
//   user   User   @relation(fields: [userId], references: [id])
//   userId Int
// }
//
// model Post {
//   id         Int        @id @default(autoincrement())
//   createdAt  DateTime   @default(now())
//   title      String
//   published  Boolean    @default(false)
//   author     User       @relation(fields: [authorId], references: [id])
//   authorId   Int
//   categories Category[] @relation(references: [id])
// }
//
// model Category {
//   id    Int    @id @default(autoincrement())
//   name  String
//   posts Post[] @relation(references: [id])
// }
//
// enum Role {
//   USER
// ADMIN
// }

// String	TEXT
// Boolean	BOOLEAN
// Int	INTEGER
// BigInt	INTEGER
// DateTime	NUMERIC
// Float	REAL
// Decimal	Decimal
// Json	Not supported
// Bytes
